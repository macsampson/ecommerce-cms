// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id String @id @default(uuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  carouselImages CarouselImage[] @relation("StoreToCarouselImage")
  categories Category[] @relation("StoreToCategory")
  sizes Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  products Product[] @relation("StoreToProduct")
  orders Order[] @relation("StoreToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
  categories Category[] 
  landingPage Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model CarouselImage {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCarouselImage", fields: [storeId], references: [id])
  // productId String
  // product Product @relation(fields: [productId], references: [id])
  // order Int
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // @@index([productId])
  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation( fields: [billboardId], references: [id])
  products Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])

  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String?
  size Size? @relation(fields: [sizeId], references: [id])
  colorId String?
  color Color? @relation(fields: [colorId], references: [id])
  images Image[]
  // carouselImages CarouselImage[]
  orderItems OrderItem[]
  quantity Int @default(0)
  description String @db.Text 
  variations ProductVariation[]
  bundles Bundle[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])

}

model ProductVariation {
  id          String  @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String  
  price       Decimal 
  bundles     BundleItem[]
  orderItems OrderItem[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Bundle {
  id String @id @default(uuid())
  minQuantity Int
  price Decimal
  bundleItems BundleItem[]
  productId String
  product Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model BundleItem {
  id                 String            @id @default(uuid())
  bundleId           String?           // Optional: May not be part of a predefined bundle
  bundle             Bundle?           @relation(fields: [bundleId], references: [id], onDelete: SetNull)
  productVariationId String
  productVariation   ProductVariation  @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  orderItemId        String            // This assumes every BundleItem is part of an OrderItem
  orderItem          OrderItem         @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  quantity           Int               @default(1) // Quantity of the specific variation
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  @@index([bundleId])
  @@index([productVariationId])
  @@index([orderItemId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId], references: [id])
  orderItems OrderItem[]
  totalPrice Decimal @default(0)
  isPaid Boolean @default(false)
  emailAddress String @default("")
  address String @default("")
  shipping Shipping?
  shippingAddress String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  price Decimal @default(0)
  productId String
  product Product @relation(fields: [productId], references: [id])

  productVariationId String?          
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id]) 
  bundleItems    BundleItem[]
  quantity Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([productVariationId])
}


model Shipping {
  id String @id
  orderId String @unique
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  carrier String // e.g., "UPS", "FedEx"
  serviceLevel String // e.g., "Ground", "2-day shipping"
  rate Decimal // the cost of shipping
  trackingNumber String? // optional, can be added later
  estimatedDelivery DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}


