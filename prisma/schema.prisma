generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Store {
  id             String          @id @default(uuid())
  name           String          @map("name")
  userId         String          @map("user_id")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  billboards     Billboard[]
  carouselImages CarouselImage[]
  categories     Category[]
  colors         Color[]
  orders         Order[]
  products       Product[]
  sizes          Size[]

  @@map("store")
}

model Billboard {
  id          String     @id @default(uuid())
  storeId     String     @map("store_id")
  label       String     @map("label")
  imageUrl    String     @map("image_url")
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  landingPage Boolean    @default(false) @map("landing_page")
  store       Store      @relation(fields: [storeId], references: [id])
  categories  Category[]

  @@index([storeId])
  @@map("billboard")
}

model CarouselImage {
  id          String   @id @default(uuid())
  imageUrl    String   @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  storeId     String   @map("store_id")
  imageCredit String   @default("") @map("image_credit")
  store       Store    @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@map("carousel_image")
}

model Category {
  id          String    @id @default(uuid())
  storeId     String    @map("store_id")
  billboardId String    @map("billboard_id")
  name        String    @map("name")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id])
  products    Product[]

  @@index([billboardId])
  @@index([storeId])
  @@map("category")
}

model Size {
  id        String    @id @default(uuid())
  storeId   String    @map("store_id")
  name      String    @map("name")
  value     String    @map("value")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  products  Product[]
  store     Store     @relation(fields: [storeId], references: [id])

  @@index([storeId])
  @@map("size")
}

model Color {
  id        String    @id @default(uuid())
  storeId   String    @map("store_id")
  name      String    @map("name")
  value     String    @map("value")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]

  @@index([storeId])
  @@map("color")
}

model Product {
  id          String             @id @default(uuid())
  storeId     String             @map("store_id")
  categoryId  String             @map("category_id")
  name        String             @map("name")
  price       Decimal            @map("price") @db.Decimal(10, 2)
  isFeatured  Boolean            @default(false) @map("is_featured")
  isArchived  Boolean            @default(false) @map("is_archived")
  sizeId      String?            @map("size_id")
  colorId     String?            @map("color_id")
  quantity    Int                @default(0) @map("quantity")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  description String             @map("description")
  weight      Decimal            @default(1.00) @map("weight") @db.Decimal(10, 2)
  bundles     Bundle[]
  images      Image[]
  orderItems  OrderItem[]
  category    Category           @relation(fields: [categoryId], references: [id])
  color       Color?             @relation(fields: [colorId], references: [id])
  size        Size?              @relation(fields: [sizeId], references: [id])
  store       Store              @relation(fields: [storeId], references: [id])
  variations  ProductVariation[]

  @@index([categoryId])
  @@index([colorId])
  @@index([sizeId])
  @@index([storeId])
  @@map("product")
}

model ProductVariation {
  id         String      @id @default(uuid())
  productId  String      @map("product_id")
  name       String      @map("name")
  price      Decimal     @map("price") @db.Decimal(10, 2)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  quantity   Int         @default(0) @map("quantity")
  orderItems OrderItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_variation")
}

model Bundle {
  id          String   @id @default(uuid())
  minQuantity Int      @map("min_quantity")
  discount    Decimal  @default(0.00) @map("discount") @db.Decimal(5, 2)
  productId   String   @map("product_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("bundle")
}

model Image {
  id        String   @id @default(uuid())
  productId String   @map("product_id")
  url       String   @map("url")
  credit    String   @default("") @map("credit")
  ordering  Int      @default(0) @map("ordering")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("image")
}

model Order {
  id              String      @id @default(uuid())
  storeId         String      @map("store_id")
  isPaid          Boolean     @default(false) @map("is_paid")
  billingAddress  String      @default("") @map("address")
  createdAt       DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime    @updatedAt @map("updated_at") @db.Timestamptz(6)
  totalPrice      Decimal     @default(0.00) @map("total_price") @db.Decimal(10, 2)
  shippingAddress String      @default("") @map("shipping_address")
  emailAddress    String      @default("") @map("email_address")
  isAbandoned     Boolean     @default(false) @map("is_abandoned")
  store           Store       @relation(fields: [storeId], references: [id])
  orderItems      OrderItem[]

  @@index([storeId])
  @@map("order")
}

model OrderItem {
  id                 String            @id @default(uuid())
  orderId            String            @map("order_id")
  productId          String            @map("product_id")
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  quantity           Int               @default(1) @map("quantity")
  productVariationId String?           @map("product_variation_id")
  price              Decimal           @default(0.00) @map("price") @db.Decimal(10, 2)
  name               String            @default("") @map("name")
  order              Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product           @relation(fields: [productId], references: [id])
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id])
  weight             Decimal           @default(0.00) @map("weight") @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
  @@index([productVariationId])
  @@map("order_item")
}

model ExchangeRate {
  id          String   @id @default(uuid())
  baseCurrency String   @map("base_currency")
  rates       Json     @map("rates") // Store exchange rates as JSON
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([baseCurrency])
  @@index([baseCurrency])
  @@map("exchange_rate")
}

model State {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(255)
  countryId   BigInt    @map("country_id")
  countryCode String    @map("country_code") @db.Char(2)
  fipsCode    String?   @map("fips_code") @db.VarChar(255)
  iso2        String?   @map("iso2") @db.VarChar(255)
  type        String?   @map("type") @db.VarChar(191)
  level       Int?
  parentId    Int?      @map("parent_id")
  latitude    Decimal?  @db.Decimal(10, 8)
  longitude   Decimal?  @db.Decimal(11, 8)
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  flag        Int       @default(1)
  wikiDataId  String?   @map("wikiDataId") @db.VarChar(255)

  @@map("states")
}

model ShippingSettings {
  id         String   @id @default(uuid())
  storeId    String   // Foreign key to your Store model
  name       String
  company    String
  street1    String
  city       String
  state      String
  zip        String
  country    String
  phone      String
  email      String
  shippoEnabled     Boolean @default(true)
  chitchatsEnabled  Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customsDeclaration Json?

  @@unique([storeId])
  @@map("shipping_settings")
}